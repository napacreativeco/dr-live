<!DOCTYPE html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]><html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]><html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if IE 9 ]><html class="ie9 no-js"> <![endif]-->
<!--[if (gt IE 9)|!(IE)]><!-->
  <html class="no-js"> <!--<![endif]-->

  {% # theme-check-disable RemoteAsset %}
  <head>
    <meta charset="utf-8" />
    <!--[if IE]><meta http-equiv='X-UA-Compatible' content='IE=edge,chrome=1' /><![endif]-->
    <!--[if lt IE 9]>
      <script src="{{ '//html5shiv.googlecode.com/svn/trunk/html5.js' }}"></script>
    <![endif]-->

    <link rel="apple-touch-icon" sizes="180x180" href="{{ 'apple-touch-icon.png' | asset_url }}">
    <link rel="icon" type="image/png" sizes="32x32" href="{{ 'favicon-32x32.png' | asset_url }}">
    <link rel="icon" type="image/png" sizes="16x16" href="{{ 'favicon-16x16.png' | asset_url }}">
    <link rel="manifest" href="{{ 'site.webmanifest' | asset_url }}">
    <link rel="mask-icon" href="{{ 'safari-pinned-tab.svg' | asset_url }}" color="#f9f9f9">
    <meta name="msapplication-TileColor" content="#f9f9f9">
    <meta name="theme-color" content="#f9f9f9">

    <title>
      {{ page_title }}{% if current_tags %}
        &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif %}
      {% if current_page != 1 %}
        &ndash; Page {{ current_page }}{% endif %}
      {% unless page_title contains shop.name %}
        &ndash; {{ shop.name }}{% endunless %}
    </title>

    {% if page_description %}
      <meta name="description" content="{{ page_description | escape }}" />
    {% endif %}

    <link rel="canonical" href="{{ canonical_url }}" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    {% render 'open-graph-tags' %}
    {% render 'twitter-card' %}

    {{ content_for_header }}

    {{ 'index.css' | asset_url | stylesheet_tag }}
    {{ 'typography.css' | asset_url | stylesheet_tag }}
    {{ 'aos.css' | asset_url | stylesheet_tag }}
    

    {% if template contains 'customers' %}
      <script async src="{{ 'customer_area.js' | shopify_asset_url }}"></script>
    {% endif %}
    
    <script async src="{{ 'shopify_common.js' | asset_url }}"></script>
    <script async src="{{ 'option_selection.js' | shopify_asset_url }}"></script>

    {% comment %} 
      <script src="{{ 'jquery.min.js' | asset_url }}" type="text/javascript"></script> 
    {% endcomment %}

    <script src="https://code.jquery.com/jquery-3.7.1.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.5/gsap.min.js" integrity="sha512-cOH8ndwGgPo+K7pTvMrqYbmI8u8k6Sho3js0gOqVWTmQMlLIi6TbqGWRTpf1ga8ci9H3iPsvDLr4X7xwhC/+DQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    {% comment %} 
    *
    * Color Theme
    *
    {% endcomment %}
    <script type="module">
        var theme = localStorage.getItem("theme");
        
        if (theme == null) {
          //console.log("no theme specified");
          localStorage.setItem("theme", "lite");
        } else {
          //console.log(theme);
        }
        document.querySelector('body').setAttribute('data-theme', localStorage.getItem("theme"));
        document.querySelector('meta[name="theme-color"]').setAttribute('content', localStorage.getItem("theme"));
    </script>
    <meta name="theme-color" content="var(--white)">

    <!-- FieldTest Tracking Pixel : Dais Records : Generated 2024-02-17 17:29:32 -->
    <meta name="facebook-domain-verification" content="kek1m9ywqbwuffgg0ab1z79j96wfhu" />
    <script id="ft-28ce8b67af8bcedacff06217003d6351" type="application/javascript" >
        !function(w,d,e,u,t,s){if(w.ft_data){return;}
            t=d.createElement(e);t.async=!0;t.src=u;
            s=d.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)
        }(window,document,'script','https://curated.fieldtest.cc/t/DARE/dare_unvpx.js');
    </script>
    
  </head>

  <body 
    id="{{ page_title | handle }}" 
    class="{% if customer %}customer-logged-in {% endif %}template-{{ template | replace: '.', ' ' | truncatewords: 1, '' | handle }}"
    data-theme="lite">
    
    
    <script src="{{ 'shop.js' | asset_url }}" async></script>
    <script src="{{ 'index-min.js' | asset_url }}"></script>
    <script src="{{ 'aos.js' | asset_url }}"></script>
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>


    {% render 'navbar' %}
    {% render 'navbarmobile' %}
    {% render 'navbarmobile--overlay' %}

    <main role="main" class="{% if settings.announcement_showhide == true %}has-bar{% endif %}"> 
      {{ content_for_layout }}
    </main>

    {% comment %} 
    *
    * AOS script
    *
    {% endcomment %}
    <script>
      AOS.init({
        disable: false, 
        startEvent: 'DOMContentLoaded', 
        initClassName: 'aos-init', 
        animatedClassName: 'aos-animate', 
        useClassNames: false, 
        disableMutationObserver: false, 
        debounceDelay: 50, 
        throttleDelay: 99,
        offset: 120, 
        delay: 0, 
        duration: 400,
        easing: 'easeInOutQuint',
        once: false,
        mirror: true,
        anchorPlacement: 'top-bottom',
      });
    </script>

    {% comment %}
    *
    * Marquee Script
    *
    {% endcomment %}
    {% if settings.announcement_marquee_mode == true and settings.announcement_showhide == false %}
      <script>
        const wrapper = document.querySelector(".announcement-marquee-wrapper");
        const boxes = gsap.utils.toArray(".announcement-marquee-box");
        
        let activeElement;
        
        const loop = horizontalLoop(boxes, {
          paused: false, 
          draggable: false,
          center: true,
          onChange: (element, index) => {}
        });
        
        function horizontalLoop(items, config) {
          items = gsap.utils.toArray(items);
          config = config || {};
          let onChange = config.onChange,
            lastIndex = 0,
            tl = gsap.timeline({repeat: config.repeat, onUpdate: onChange && function() {
                let i = tl.closestIndex();
                if (lastIndex !== i) {
                  lastIndex = i;
                  onChange(items[i], i);
                }
              }, paused: config.paused, defaults: {ease: "none"}, onReverseComplete: () => tl.totalTime(tl.rawTime() + tl.duration() * 100)}),
            length = items.length,
            startX = items[0].offsetLeft,
            times = [],
            widths = [],
            spaceBefore = [],
            xPercents = [],
            curIndex = 0,
            indexIsDirty = false,
            center = config.center,
            pixelsPerSecond = (config.speed || 1) * {{ settings.marquee_speed | default: '20' }},
            snap = config.snap === false ? v => v : gsap.utils.snap(config.snap || 1), // some browsers shift by a pixel to accommodate flex layouts, so for example if width is 20% the first element's width might be 242px, and the next 243px, alternating back and forth. So we snap to 5 percentage points to make things look more natural
            timeOffset = 0,
            container = center === true ? items[0].parentNode : gsap.utils.toArray(center)[0] || items[0].parentNode,
            totalWidth,
            getTotalWidth = () => items[length-1].offsetLeft + xPercents[length-1] / 100 * widths[length-1] - startX + spaceBefore[0] + items[length-1].offsetWidth * gsap.getProperty(items[length-1], "scaleX") + (parseFloat(config.paddingRight) || 0),
            populateWidths = () => {
              let b1 = container.getBoundingClientRect(), b2;
              items.forEach((el, i) => {
                widths[i] = parseFloat(gsap.getProperty(el, "width", "px"));
                xPercents[i] = snap(parseFloat(gsap.getProperty(el, "x", "px")) / widths[i] * 100 + gsap.getProperty(el, "xPercent"));
                b2 = el.getBoundingClientRect();
                spaceBefore[i] = b2.left - (i ? b1.right : b1.left);
                b1 = b2;
              });
              gsap.set(items, { // convert "x" to "xPercent" to make things responsive, and populate the widths/xPercents Arrays to make lookups faster.
                xPercent: i => xPercents[i]
              });
              totalWidth = getTotalWidth();
            },
            timeWrap,
            populateOffsets = () => {
              timeOffset = center ? tl.duration() * (container.offsetWidth / 2) / totalWidth : 0;
              center && times.forEach((t, i) => {
                times[i] = timeWrap(tl.labels["label" + i] + tl.duration() * widths[i] / 2 / totalWidth - timeOffset);
              });
            },
            getClosest = (values, value, wrap) => {
              let i = values.length,
                closest = 1e10,
                index = 0, d;
              while (i--) {
                d = Math.abs(values[i] - value);
                if (d > wrap / 2) {
                  d = wrap - d;
                }
                if (d < closest) {
                  closest = d;
                  index = i;
                }
              }
              return index;
            },
            populateTimeline = () => {
              let i, item, curX, distanceToStart, distanceToLoop;
              tl.clear();
              for (i = 0; i < length; i++) {
                item = items[i];
                curX = xPercents[i] / 100 * widths[i];
                distanceToStart = item.offsetLeft + curX - startX + spaceBefore[0];
                distanceToLoop = distanceToStart + widths[i] * gsap.getProperty(item, "scaleX");
                tl.to(item, {xPercent: snap((curX - distanceToLoop) / widths[i] * 100), duration: distanceToLoop / pixelsPerSecond}, 0)
                  .fromTo(item, {xPercent: snap((curX - distanceToLoop + totalWidth) / widths[i] * 100)}, {xPercent: xPercents[i], duration: (curX - distanceToLoop + totalWidth - curX) / pixelsPerSecond, immediateRender: false}, distanceToLoop / pixelsPerSecond)
                  .add("label" + i, distanceToStart / pixelsPerSecond);
                times[i] = distanceToStart / pixelsPerSecond;
              }
              timeWrap = gsap.utils.wrap(0, tl.duration());
            },
            refresh = (deep) => {
              let progress = tl.progress();
              tl.progress(0, true);
              populateWidths();
              deep && populateTimeline();
              populateOffsets();
              deep && tl.draggable ? tl.time(times[curIndex], true) : tl.progress(progress, true);
            },
            proxy;
          gsap.set(items, {x: 0});
          populateWidths();
          populateTimeline();
          populateOffsets();
          window.addEventListener("resize", () => refresh(true));
          function toIndex(index, vars) {
            vars = vars || {};
            (Math.abs(index - curIndex) > length / 2) && (index += index > curIndex ? -length : length); // always go in the shortest direction
            let newIndex = gsap.utils.wrap(0, length, index),
              time = times[newIndex];
            if (time > tl.time() !== index > curIndex && index !== curIndex) { // if we're wrapping the timeline's playhead, make the proper adjustments
              time += tl.duration() * (index > curIndex ? 1 : -1);
            }
            if (time < 0 || time > tl.duration()) {
              vars.modifiers = {time: timeWrap};
            }
            curIndex = newIndex;
            vars.overwrite = true;
            gsap.killTweensOf(proxy);    
            return vars.duration === 0 ? tl.time(timeWrap(time)) : tl.tweenTo(time, vars);
          }
          tl.toIndex = (index, vars) => toIndex(index, vars);
          tl.closestIndex = setCurrent => {
            let index = getClosest(times, tl.time(), tl.duration());
            if (setCurrent) {
              curIndex = index;
              indexIsDirty = false;
            }
            return index;
          };
          tl.current = () => indexIsDirty ? tl.closestIndex(true) : curIndex;
          tl.next = vars => toIndex(tl.current()+1, vars);
          tl.previous = vars => toIndex(tl.current()-1, vars);
          tl.times = times;
          tl.progress(1, true).progress(0, true); // pre-render for performance
          if (config.reversed) {
            tl.vars.onReverseComplete();
            tl.reverse();
          }
          if (config.draggable && typeof(Draggable) === "function") {
            proxy = document.createElement("div")
            let wrap = gsap.utils.wrap(0, 1),
              ratio, startProgress, draggable, dragSnap, lastSnap, initChangeX,
              align = () => tl.progress(wrap(startProgress + (draggable.startX - draggable.x) * ratio)),
              syncIndex = () => tl.closestIndex(true);
            typeof(InertiaPlugin) === "undefined" && console.warn("InertiaPlugin required for momentum-based scrolling and snapping. https://greensock.com/club");
            draggable = Draggable.create(proxy, {
              trigger: items[0].parentNode,
              type: "x",
              onPressInit() {
                let x = this.x;
                gsap.killTweensOf(tl);
                startProgress = tl.progress();
                refresh();
                ratio = 1 / totalWidth;
                initChangeX = (startProgress / -ratio) - x;
                gsap.set(proxy, {x: startProgress / -ratio});
              },
              onDrag: align,
              onThrowUpdate: align,
              overshootTolerance: 0,
              inertia: true,
              snap(value) {
                //note: if the user presses and releases in the middle of a throw, due to the sudden correction of proxy.x in the onPressInit(), the velocity could be very large, throwing off the snap. So sense that condition and adjust for it. We also need to set overshootTolerance to 0 to prevent the inertia from causing it to shoot past and come back
                if (Math.abs(startProgress / -ratio - this.x) < 10) {
                  return lastSnap + initChangeX
                }
                let time = -(value * ratio) * tl.duration(),
                  wrappedTime = timeWrap(time),
                  snapTime = times[getClosest(times, wrappedTime, tl.duration())],
                  dif = snapTime - wrappedTime;
                Math.abs(dif) > tl.duration() / 2 && (dif += dif < 0 ? tl.duration() : -tl.duration());
                lastSnap = (time + dif) / tl.duration() / -ratio;
                return lastSnap;
              },
              onRelease() {
                syncIndex();
                draggable.isThrowing && (indexIsDirty = true);
              },
              onThrowComplete: syncIndex
            })[0];
            tl.draggable = draggable;
          }
        
          tl.closestIndex(true);
          lastIndex = curIndex;
          onChange && onChange(items[curIndex], curIndex);
        
          return tl;
          
        }
      </script>
    {% endif %}


    {% comment %}
    *
    * Footer
    *
    {% endcomment %}
    <footer>
      {% render 'footer' %}
    </footer>

    
    {% comment %}
    *
    * Swiper
    *
    {% endcomment %}
    <script>
      (function($) {

        const swiper = new Swiper('.hero-swiper', {
          direction: 'horizontal',
          duration: 1000,
          spaceBetween: 2,
          autoplay: {
            delay: 5000,
          },
          loop: true,
          pagination: {
            el: '.swiper-pagination',
            clickable: true
          },
          navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
          },
          grabCursor: false,
          on: {
            afterInit: function(e) {},
            touchStart: function(e) {},
            touchEnd: function(e) {},
            slideChangeTransitionStart: function(e) {},
            slideChangeTransitionEnd: function(e) {

              $('.hero-product').css({
                transform: 'translateY(0)',
                opacity: 1
              });

            },
            init: function(e) {

              $('.hero-product').css({
                transform: 'translateY(0)',
                opacity: 1
              });

            },
            slideChange: function(e) {

              $('.hero-product').css({
                transform: 'translateY(100px)',
                opacity: 0
              });

            }

          }
        });

        const galleryswiper = new Swiper('.product-gallery-swiper', {
          direction: 'horizontal',
          loop: true,
          spaceBetween: 2,
          navigation: {
            nextEl: '.product-gallery-next',
            prevEl: '.product-gallery-prev',
          },
          pagination: {
            el: '.product-gallery-pagination-container',
            clickable: true
          },
        });

        const tourswiper = new Swiper('.spotlight-swiper', {
          direction: 'horizontal',
          loop: true,
          autoplay: {
            delay: 5000,
          },
          navigation: {
            nextEl: '.tour-spotlight-next'
          }
        });

      })(jQuery);
    </script>
  
    {% comment %}
    *
    * AJAX Cart
    *
    {% endcomment %}
    {{ 'liquid-ajax-cart.js' | asset_url | script_tag }}
  
    <script type="application/json" data-ajax-cart-initial-state>
      {{ cart | json }}
    </script>

    <script type="application/json" data-ajax-cart-configuration>
      {
        "addToCartCssClass": "js-my-cart-open"
      }
    </script>
    
    
    {% comment %}
    *
    * Cart Drawer
    *
    {% endcomment %}
    <div class="cart-drawer">
      {% section 'cart-drawer' %}
    </div>
  
    {% comment %} 
    *
    * AJAX Cart
    * open drawer on add-to-cart
    *
    {% endcomment %}
    <script type="module">
      //import { subscribeToCartSectionsUpdate } from '{{ "liquid-ajax-cart.js" | asset_url }}';
  
      //subscribeToCartSectionsUpdate( sections => {
        // response here
      //});
    </script>

    {% comment %} 
    *
    * AJAX Cart
    * subscribe to updates
    *
    {% endcomment %}
    <script type="module" type="text/javascript">
      import { subscribeToCartAjaxRequests, subscribeToCartStateUpdate } from '{{ "liquid-ajax-cart.js" | asset_url }}';
  
      // Show a pop-up message after adding to cart
      subscribeToCartAjaxRequests(( requestState, subscribeToResult ) => {
        if ( requestState.requestType === 'add' ) {
          subscribeToResult( requestState => {
            if ( requestState.responseData?.ok ) {

              //let productName = requestState.responseData.body.title;
              
              //if ( requestState.responseData.body.items?.length === 1 ) {
              //  productName = requestState.responseData.body.items[0].title;
              //}
  
              //cartSlideOut();

            }
          });
        }
      });
    </script>


    {% comment %} 
    *
    * Navbar
    *
    {% endcomment %}
    <script type="text/javascript">
      (function($) {

        // //////////////////////////////
        // NAVBAR - SHOW SEARCH        //
        // //////////////////////////////
        $('.search-icon-nav').on('click', function() {

            $('.search-form-component-nav').css({
                width: 'auto'
            });

            $('#search-field').focus();

            $('.search-icon-nav').css({
                display: 'none'
            });

        });

        $('.search-component-close').on('click', function() {

            $('.search-form-component-nav').css({
                width: '0px'
            });

            $('.search-icon-nav').css({
                display: 'block'
            });

        });

        // //////////////////////////////
        // THEME MODE                  //
        // //////////////////////////////
        $('.theme-mode').on('click', function() {
            if ( localStorage.getItem("theme") == 'dark' ) {
                localStorage.setItem("theme", "lite");
                $('body').attr('data-theme', localStorage.getItem("theme"));
            } else {
                localStorage.setItem("theme", "dark");
                $('body').attr('data-theme', localStorage.getItem("theme"));
            }
        });
        
      })(jQuery);
    </script>

    {% comment %} 
    *
    * Collection Filters
    *
    {% endcomment %}
    <script type="text/javascript">
      (function($) {

        // //////////////////////////////
        // COLLECTION - SHOW FILTERS   //
        // //////////////////////////////
        $('.filter-trigger').on('click', function() {

          // close other panels
          if ( $('.search-wrapper').hasClass('opened') ) {
            $('.search-wrapper').removeClass('opened');
            $('.close-search').hide();
            $('.search-icon').show();
          }

          $('.sorting-wrapper').addClass('opened');
          $('.filter-icon').hide();
          $('.close-filters').show();
        });

        // //////////////////////////////
        // COLLECTION - HIDE FILTERS   //
        // //////////////////////////////
        $('.close-filters').on('click', function() {
          $('.sorting-wrapper').removeClass('opened');
          $('.filter-icon').show();
          $('.close-filters').hide();
        });

        // //////////////////////////////
        // COLLECTION - SHOW SEARCH    //
        // //////////////////////////////
        $('.search-trigger').on('click', function() {

            // Filter Panel
            if ( $('.sorting-wrapper').hasClass('opened') ) {
              $('.sorting-wrapper').removeClass('opened');
              $('.filter-icon').show();
              $('.close-filters').hide();
            }

            $('.search-wrapper').addClass('opened');
            $('.close-search').show();
            $('.search-icon').hide();

        });

        // //////////////////////////////
        // COLLECTION - CLOSE SEARCH   //
        // //////////////////////////////
        $('.close-search').on('click', function() {
            $('.search-wrapper').removeClass('opened');
            $('.search-icon').show();
            $('.close-search').hide();
        });

      })(jQuery);
    </script>

    {% comment %} 
    *
    * Supress JS
    *
    {% endcomment %}
    <script type="text/javascript">
      function suppressJSError() {
        return true;
      }
      //window.onerror=suppressJSError;
    </script>

    {% comment %} 
    *
    * Submenu
    *
    {% endcomment %}
    <script type="text/javascript">
      (function($) {

          // //////////////////////////////
          // NAVBAR - MOUSE IN           //
          // //////////////////////////////
          $('.has-dropdown').mouseenter(function() {
              
              var title = $(this).attr('data-title');

              $('[data-menu="'+ title +'"]').css({
                  display: 'flex',
                  opacity: 1,
                  transition: 'all 0.3s ease-in-out'
              });

              $('.more').css({
                  color: 'var(--white)'
              });

          });

          // //////////////////////////////
          // NAVBAR - MOUSE OUT          //
          // //////////////////////////////    
          $('#navbar').mouseleave(function() {

              $('.submenu').css({
                  display: 'none',
                  transition: 'all 0.3s ease-in-out'
              });
              
              $('.more').css({
                  color: 'var(--red)'
              });
          });

      })(jQuery);
    </script>
    
    {% comment %} 
    *
    * Cart Drawer
    *
    {% endcomment %}
    <script>
      (function($) {

        // //////////////////////////////
        // CART                        //
        // //////////////////////////////
        $('.cart-nav-opener').on('click', function() {
            $('body').addClass('js-my-cart-open');
        });

        // //////////////////////////////
        // CART - CLOSE ON OUTSIDE CLIC//
        // //////////////////////////////
        $("main").on("click",function(e) {
            var cl = document.body.classList;
            var tl = e.currentTarget.classList;

            if (tl.contains('cart-drawer--wrapper')) {

                // nothing

            } else {

                if (cl.contains('js-my-cart-open')) {
                    cl.remove('js-my-cart-open');
                }

            }
        });

        // //////////////////////////////
        // CART - CLOSE                //
        // //////////////////////////////
        $('.cart-drawer--close').on('click', function() {
            $('body').removeClass('js-my-cart-open');
        });

      })(jQuery);
    </script>

    {% comment %} 
    *
    * Mobile Nav
    *
    {% endcomment %}
    <script>
      (function($) {
        // //////////////////////////////
        // MOBILE NAV                  //
        // ////////////////////////////// 
        $('.menu-button').on('click', function() {

            if ( $(this).hasClass('opened') ) {

                gsap.to( '.navbar-mobile--overlay', {
                    display: 'none',
                    ease: 'easeOutExpo',
                });

            } else {

                gsap.to( '.navbar-mobile--overlay', {
                    display: 'block',
                    ease: 'easeOutExpo',
                });

            }

        });

        // //////////////////////////////
        // MOBILE NAV - CLOSE          //
        // ////////////////////////////// 
        $('.close-overlay').on('click', function() {
            gsap.to( '.navbar-mobile--overlay', {
                display: 'none',
                ease: 'easeOutExpo',
            });
        });

        // //////////////////////////////
        // MOBILE NAV - SUBMENU        //
        // //////////////////////////////
        $('.has-mobile-dropdown').click(function(e) {
            // e.preventDefault();
            var title = $(this).attr('data-title');

            if ( $(this).hasClass('opened-sub') ) {

                var nearest = $(this).find('.mobile-submenu');
        
                $(this).find('.more').text('+');
                $(this).removeClass('opened-sub');

                gsap.to( $(nearest), {
                    height: '0px',
                    duration: 0.6,
                    margin: '0 0 0 0',
                    ease: 'easeOutExpo',
                });

            } else {

                var nearest = $(this).find('.mobile-submenu');
                $(this).find('.more').text('-');
                $(this).addClass('opened-sub');

                gsap.to( $(nearest), {
                    height: '100%',
                    duration: 0.6,
                    margin: '20px 0 10px 0',
                    ease: 'easeOutExpo',
                });

            }

        });
      })(jQuery);
    </script>

    {% comment %} 
    *
    * Tour Modal
    *
    {% endcomment %}
    <script type="text/javascript">
      (function($) {

        $('.tour-modal').on('click', function() {
            $('.tour-modal').css('display', 'none');
        });

        $('.flier-trigger').on('click', function() {
          var modal = $(this).attr('data-image');

          $('.tour-modal').css('display', 'flex').html('<img src="' + modal + '" />');
        });

      })(jQuery);
    </script>

    {% comment %} 
    *
    * Announcement Bar
    *
    {% endcomment %}
    <script type="text/javascript">
      (function($) {

        // //////////////////////////////
        // ANNOUNCEMENT BAR - CLOSE    //
        // //////////////////////////////
        $('.close-announcement-icon').on('click', function() {

          $('.announcement-bar').hide();

          $('main[role="main"]').removeClass('has-bar');

        });

        // //////////////////////////////
        // MARQUEE - CLOSE             //
        // //////////////////////////////
        $('.close-marquee-icon').on('click', function() {

          $('main[role="main"]').removeClass('has-bar');

          $('#announcement-bar--marquee').css({
              display: 'none'
          });
        });

      })(jQuery);
    </script>

  </body>

</html>